//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Shiba.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Shiba.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ShibaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, NULL=15, STRING=16, BOOLEAN=17, 
		TOKEN=18, NUMBER=19, Hws=20, Vws=21, DocComment=22, BlockComment=23, LineComment=24, 
		LineCommentExt=25;
	public const int
		RULE_root = 0, RULE_obj = 1, RULE_shortobj = 2, RULE_pair = 3, RULE_value = 4, 
		RULE_staticvalue = 5, RULE_percent = 6, RULE_thickness = 7, RULE_func = 8, 
		RULE_paramter = 9, RULE_binding = 10, RULE_resource = 11, RULE_jsonpath = 12, 
		RULE_dic = 13;
	public static readonly string[] ruleNames = {
		"root", "obj", "shortobj", "pair", "value", "staticvalue", "percent", 
		"thickness", "func", "paramter", "binding", "resource", "jsonpath", "dic"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "'->'", "':'", "'='", "'%'", "'['", "']'", 
		"'('", "')'", "'$bind'", "'$res'", "'$json'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "NULL", "STRING", "BOOLEAN", "TOKEN", "NUMBER", "Hws", 
		"Vws", "DocComment", "BlockComment", "LineComment", "LineCommentExt"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shiba.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShibaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShibaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShibaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; obj();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext[] obj() {
			return GetRuleContexts<ObjContext>();
		}
		public ObjContext obj(int i) {
			return GetRuleContext<ObjContext>(i);
		}
		public ShortobjContext[] shortobj() {
			return GetRuleContexts<ShortobjContext>();
		}
		public ShortobjContext shortobj(int i) {
			return GetRuleContext<ShortobjContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(TOKEN);
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 31; Match(T__0);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOKEN) {
					{
					State = 35;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 32; pair();
						}
						break;
					case 2:
						{
						State = 33; obj();
						}
						break;
					case 3:
						{
						State = 34; shortobj();
						}
						break;
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1 || _la==TOKEN) {
						{
						{
						State = 38;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__1) {
							{
							State = 37; Match(T__1);
							}
						}

						State = 43;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
						case 1:
							{
							State = 40; pair();
							}
							break;
						case 2:
							{
							State = 41; obj();
							}
							break;
						case 3:
							{
							State = 42; shortobj();
							}
							break;
						}
						}
						}
						State = 49;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 52; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortobjContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ShortobjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortobj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterShortobj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitShortobj(this);
		}
	}

	[RuleVersion(0)]
	public ShortobjContext shortobj() {
		ShortobjContext _localctx = new ShortobjContext(Context, State);
		EnterRule(_localctx, 4, RULE_shortobj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(TOKEN);
			State = 56; Match(T__3);
			State = 57; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(TOKEN);
			State = 60;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 61; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public StaticvalueContext staticvalue() {
			return GetRuleContext<StaticvalueContext>(0);
		}
		public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		public ResourceContext resource() {
			return GetRuleContext<ResourceContext>(0);
		}
		public JsonpathContext jsonpath() {
			return GetRuleContext<JsonpathContext>(0);
		}
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public DicContext dic() {
			return GetRuleContext<DicContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; staticvalue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; binding();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65; resource();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66; jsonpath();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 67; func();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 68; dic();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticvalueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ShibaParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(ShibaParser.NUMBER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(ShibaParser.BOOLEAN, 0); }
		public ITerminalNode NULL() { return GetToken(ShibaParser.NULL, 0); }
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public PercentContext percent() {
			return GetRuleContext<PercentContext>(0);
		}
		public ThicknessContext thickness() {
			return GetRuleContext<ThicknessContext>(0);
		}
		public StaticvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticvalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterStaticvalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitStaticvalue(this);
		}
	}

	[RuleVersion(0)]
	public StaticvalueContext staticvalue() {
		StaticvalueContext _localctx = new StaticvalueContext(Context, State);
		EnterRule(_localctx, 10, RULE_staticvalue);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73; Match(BOOLEAN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 74; Match(NULL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75; Match(TOKEN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 76; percent();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 77; thickness();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ShibaParser.NUMBER, 0); }
		public PercentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterPercent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitPercent(this);
		}
	}

	[RuleVersion(0)]
	public PercentContext percent() {
		PercentContext _localctx = new PercentContext(Context, State);
		EnterRule(_localctx, 12, RULE_percent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(NUMBER);
			State = 81; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThicknessContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ShibaParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ShibaParser.NUMBER, i);
		}
		public ThicknessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thickness; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterThickness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitThickness(this);
		}
	}

	[RuleVersion(0)]
	public ThicknessContext thickness() {
		ThicknessContext _localctx = new ThicknessContext(Context, State);
		EnterRule(_localctx, 14, RULE_thickness);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; Match(T__7);
				State = 84; Match(NUMBER);
				State = 85; Match(T__8);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; Match(T__7);
				State = 87; Match(NUMBER);
				State = 88; Match(T__1);
				State = 89; Match(NUMBER);
				State = 90; Match(T__8);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; Match(T__7);
				State = 92; Match(NUMBER);
				State = 93; Match(T__1);
				State = 94; Match(NUMBER);
				State = 95; Match(T__1);
				State = 96; Match(NUMBER);
				State = 97; Match(T__1);
				State = 98; Match(NUMBER);
				State = 99; Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public ParamterContext[] paramter() {
			return GetRuleContexts<ParamterContext>();
		}
		public ParamterContext paramter(int i) {
			return GetRuleContext<ParamterContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(TOKEN);
			State = 103; Match(T__9);
			State = 104; paramter();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 105; Match(T__1);
				State = 106; paramter();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112; Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamterContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public ParamterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterParamter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitParamter(this);
		}
	}

	[RuleVersion(0)]
	public ParamterContext paramter() {
		ParamterContext _localctx = new ParamterContext(Context, State);
		EnterRule(_localctx, 18, RULE_paramter);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; func();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		public StaticvalueContext staticvalue() {
			return GetRuleContext<StaticvalueContext>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitBinding(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 20, RULE_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(T__11);
			State = 119; staticvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public StaticvalueContext staticvalue() {
			return GetRuleContext<StaticvalueContext>(0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 22, RULE_resource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(T__12);
			State = 122; staticvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpathContext : ParserRuleContext {
		public StaticvalueContext staticvalue() {
			return GetRuleContext<StaticvalueContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterJsonpath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitJsonpath(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 24, RULE_jsonpath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__13);
			State = 125; staticvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DicContext : ParserRuleContext {
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public DicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterDic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitDic(this);
		}
	}

	[RuleVersion(0)]
	public DicContext dic() {
		DicContext _localctx = new DicContext(Context, State);
		EnterRule(_localctx, 26, RULE_dic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(T__7);
			State = 128; pair();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==TOKEN) {
				{
				{
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 129; Match(T__1);
					}
				}

				State = 132; pair();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '\x8F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'&', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', '\a', 
		'\x3', '\x30', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x33', '\v', '\x3', 
		'\x5', '\x3', '\x35', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x38', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'g', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'n', '\n', '\n', '\f', '\n', '\xE', '\n', 'q', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'w', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x85', '\n', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\x88', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x8B', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x2', '\x3', '\x3', '\x2', '\a', '\b', '\x2', '\x99', 
		'\x2', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x4', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x39', '\x3', '\x2', '\x2', '\x2', '\b', '=', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'R', '\x3', '\x2', '\x2', '\x2', '\x10', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'h', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x16', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '{', '\x3', '\x2', '\x2', '\x2', '\x1A', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x81', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x5', 
		'\x4', '\x3', '\x2', '\x1F', '\x3', '\x3', '\x2', '\x2', '\x2', ' ', '\x37', 
		'\a', '\x14', '\x2', '\x2', '!', '\x34', '\a', '\x3', '\x2', '\x2', '\"', 
		'&', '\x5', '\b', '\x5', '\x2', '#', '&', '\x5', '\x4', '\x3', '\x2', 
		'$', '&', '\x5', '\x6', '\x4', '\x2', '%', '\"', '\x3', '\x2', '\x2', 
		'\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x31', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\a', '\x4', 
		'\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', 
		'\x2', '\x2', '\x2', ')', '-', '\x3', '\x2', '\x2', '\x2', '*', '.', '\x5', 
		'\b', '\x5', '\x2', '+', '.', '\x5', '\x4', '\x3', '\x2', ',', '.', '\x5', 
		'\x6', '\x4', '\x2', '-', '*', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', 
		'\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '/', '(', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\a', 
		'\x5', '\x2', '\x2', '\x37', '!', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '\x14', '\x2', '\x2', ':', ';', '\a', '\x6', 
		'\x2', '\x2', ';', '<', '\x5', '\n', '\x6', '\x2', '<', '\a', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\a', '\x14', '\x2', '\x2', '>', '?', '\t', '\x2', 
		'\x2', '\x2', '?', '@', '\x5', '\n', '\x6', '\x2', '@', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x41', 'H', '\x5', '\f', '\a', '\x2', '\x42', 'H', '\x5', 
		'\x16', '\f', '\x2', '\x43', 'H', '\x5', '\x18', '\r', '\x2', '\x44', 
		'H', '\x5', '\x1A', '\xE', '\x2', '\x45', 'H', '\x5', '\x12', '\n', '\x2', 
		'\x46', 'H', '\x5', '\x1C', '\xF', '\x2', 'G', '\x41', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x42', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'Q', '\a', '\x12', '\x2', '\x2', 'J', 
		'Q', '\a', '\x15', '\x2', '\x2', 'K', 'Q', '\a', '\x13', '\x2', '\x2', 
		'L', 'Q', '\a', '\x11', '\x2', '\x2', 'M', 'Q', '\a', '\x14', '\x2', '\x2', 
		'N', 'Q', '\x5', '\xE', '\b', '\x2', 'O', 'Q', '\x5', '\x10', '\t', '\x2', 
		'P', 'I', '\x3', '\x2', '\x2', '\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 
		'P', 'K', '\x3', '\x2', '\x2', '\x2', 'P', 'L', '\x3', '\x2', '\x2', '\x2', 
		'P', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\x15', '\x2', '\x2', 'S', 'T', '\a', '\t', '\x2', 
		'\x2', 'T', '\xF', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\n', '\x2', 
		'\x2', 'V', 'W', '\a', '\x15', '\x2', '\x2', 'W', 'g', '\a', '\v', '\x2', 
		'\x2', 'X', 'Y', '\a', '\n', '\x2', '\x2', 'Y', 'Z', '\a', '\x15', '\x2', 
		'\x2', 'Z', '[', '\a', '\x4', '\x2', '\x2', '[', '\\', '\a', '\x15', '\x2', 
		'\x2', '\\', 'g', '\a', '\v', '\x2', '\x2', ']', '^', '\a', '\n', '\x2', 
		'\x2', '^', '_', '\a', '\x15', '\x2', '\x2', '_', '`', '\a', '\x4', '\x2', 
		'\x2', '`', '\x61', '\a', '\x15', '\x2', '\x2', '\x61', '\x62', '\a', 
		'\x4', '\x2', '\x2', '\x62', '\x63', '\a', '\x15', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x4', '\x2', '\x2', '\x64', '\x65', '\a', '\x15', '\x2', 
		'\x2', '\x65', 'g', '\a', '\v', '\x2', '\x2', '\x66', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'X', '\x3', '\x2', '\x2', '\x2', '\x66', ']', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x11', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\a', '\x14', '\x2', '\x2', 'i', 'j', '\a', '\f', '\x2', '\x2', 'j', 'o', 
		'\x5', '\x14', '\v', '\x2', 'k', 'l', '\a', '\x4', '\x2', '\x2', 'l', 
		'n', '\x5', '\x14', '\v', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\r', '\x2', '\x2', 
		's', '\x13', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x5', '\n', '\x6', 
		'\x2', 'u', 'w', '\x5', '\x12', '\n', '\x2', 'v', 't', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\a', '\xE', '\x2', '\x2', 'y', 'z', '\x5', '\f', 
		'\a', '\x2', 'z', '\x17', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', 
		'\xF', '\x2', '\x2', '|', '}', '\x5', '\f', '\a', '\x2', '}', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\x10', '\x2', '\x2', '\x7F', 
		'\x80', '\x5', '\f', '\a', '\x2', '\x80', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\a', '\n', '\x2', '\x2', '\x82', '\x89', '\x5', 
		'\b', '\x5', '\x2', '\x83', '\x85', '\a', '\x4', '\x2', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x5', 
		'\b', '\x5', '\x2', '\x87', '\x84', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\a', '\v', '\x2', '\x2', '\x8D', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '%', '(', '-', '\x31', '\x34', '\x37', 'G', 'P', '\x66', 
		'o', 'v', '\x84', '\x89',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Shiba.Parser
