//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Shiba.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Shiba.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ShibaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, STRING=7, BOOLEAN=8, TOKEN=9, 
		NUMBER=10, Hws=11, Vws=12, DocComment=13, BlockComment=14, LineComment=15, 
		LineCommentExt=16;
	public const int
		RULE_root = 0, RULE_obj = 1, RULE_pair = 2, RULE_value = 3, RULE_percent = 4, 
		RULE_thickness = 5;
	public static readonly string[] ruleNames = {
		"root", "obj", "pair", "value", "percent", "thickness"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'null'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "STRING", "BOOLEAN", "TOKEN", 
		"NUMBER", "Hws", "Vws", "DocComment", "BlockComment", "LineComment", "LineCommentExt"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shiba.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShibaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShibaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShibaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; obj();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext[] obj() {
			return GetRuleContexts<ObjContext>();
		}
		public ObjContext obj(int i) {
			return GetRuleContext<ObjContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(TOKEN);
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 15; Match(T__0);
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOKEN) {
					{
					State = 18;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 16; pair();
						}
						break;
					case 2:
						{
						State = 17; obj();
						}
						break;
					}
					State = 29;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1 || _la==TOKEN) {
						{
						{
						State = 21;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__1) {
							{
							State = 20; Match(T__1);
							}
						}

						State = 25;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
						case 1:
							{
							State = 23; pair();
							}
							break;
						case 2:
							{
							State = 24; obj();
							}
							break;
						}
						}
						}
						State = 31;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 34; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(TOKEN);
			State = 38; Match(T__3);
			State = 39; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ShibaParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(ShibaParser.NUMBER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(ShibaParser.BOOLEAN, 0); }
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public PercentContext percent() {
			return GetRuleContext<PercentContext>(0);
		}
		public ThicknessContext thickness() {
			return GetRuleContext<ThicknessContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 43; Match(BOOLEAN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 44; Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 45; Match(TOKEN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 46; percent();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 47; thickness();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ShibaParser.NUMBER, 0); }
		public PercentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterPercent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitPercent(this);
		}
	}

	[RuleVersion(0)]
	public PercentContext percent() {
		PercentContext _localctx = new PercentContext(Context, State);
		EnterRule(_localctx, 8, RULE_percent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(NUMBER);
			State = 51; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThicknessContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ShibaParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ShibaParser.NUMBER, i);
		}
		public ThicknessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thickness; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterThickness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitThickness(this);
		}
	}

	[RuleVersion(0)]
	public ThicknessContext thickness() {
		ThicknessContext _localctx = new ThicknessContext(Context, State);
		EnterRule(_localctx, 10, RULE_thickness);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(NUMBER);
				State = 55; Match(T__1);
				State = 56; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57; Match(NUMBER);
				State = 58; Match(T__1);
				State = 59; Match(NUMBER);
				State = 60; Match(T__1);
				State = 61; Match(NUMBER);
				State = 62; Match(T__1);
				State = 63; Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', '\x45', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x15', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x18', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\a', '\x3', 
		'\x1E', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '!', '\v', '\x3', '\x5', 
		'\x3', '#', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '&', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x33', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x43', '\n', '\a', '\x3', '\a', '\x2', 
		'\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', 
		'L', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\'', '\x3', '\x2', '\x2', '\x2', '\b', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x34', '\x3', '\x2', '\x2', '\x2', '\f', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', '\x2', 
		'\xF', '\x3', '\x3', '\x2', '\x2', '\x2', '\x10', '%', '\a', '\v', '\x2', 
		'\x2', '\x11', '\"', '\a', '\x3', '\x2', '\x2', '\x12', '\x15', '\x5', 
		'\x6', '\x4', '\x2', '\x13', '\x15', '\x5', '\x4', '\x3', '\x2', '\x14', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\a', 
		'\x4', '\x2', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1C', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x1C', '\x5', 
		'\x4', '\x3', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '&', '\a', '\x5', '\x2', '\x2', '%', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\v', '\x2', '\x2', '(', 
		')', '\a', '\x6', '\x2', '\x2', ')', '*', '\x5', '\b', '\x5', '\x2', '*', 
		'\a', '\x3', '\x2', '\x2', '\x2', '+', '\x33', '\a', '\t', '\x2', '\x2', 
		',', '\x33', '\a', '\f', '\x2', '\x2', '-', '\x33', '\a', '\n', '\x2', 
		'\x2', '.', '\x33', '\a', '\a', '\x2', '\x2', '/', '\x33', '\a', '\v', 
		'\x2', '\x2', '\x30', '\x33', '\x5', '\n', '\x6', '\x2', '\x31', '\x33', 
		'\x5', '\f', '\a', '\x2', '\x32', '+', '\x3', '\x2', '\x2', '\x2', '\x32', 
		',', '\x3', '\x2', '\x2', '\x2', '\x32', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '.', '\x3', '\x2', '\x2', '\x2', '\x32', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\t', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\f', '\x2', '\x2', '\x35', '\x36', '\a', '\b', '\x2', '\x2', 
		'\x36', '\v', '\x3', '\x2', '\x2', '\x2', '\x37', '\x43', '\a', '\f', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\f', '\x2', '\x2', '\x39', ':', '\a', 
		'\x4', '\x2', '\x2', ':', '\x43', '\a', '\f', '\x2', '\x2', ';', '<', 
		'\a', '\f', '\x2', '\x2', '<', '=', '\a', '\x4', '\x2', '\x2', '=', '>', 
		'\a', '\f', '\x2', '\x2', '>', '?', '\a', '\x4', '\x2', '\x2', '?', '@', 
		'\a', '\f', '\x2', '\x2', '@', '\x41', '\a', '\x4', '\x2', '\x2', '\x41', 
		'\x43', '\a', '\f', '\x2', '\x2', '\x42', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x38', '\x3', '\x2', '\x2', '\x2', '\x42', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\r', '\x3', '\x2', '\x2', '\x2', '\n', '\x14', 
		'\x17', '\x1B', '\x1F', '\"', '%', '\x32', '\x42',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Shiba.Parser
