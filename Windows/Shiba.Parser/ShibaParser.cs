//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Shiba.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Shiba.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ShibaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, STRING=14, BOOLEAN=15, TOKEN=16, 
		NUMBER=17, Hws=18, Vws=19, DocComment=20, BlockComment=21, LineComment=22, 
		LineCommentExt=23;
	public const int
		RULE_root = 0, RULE_obj = 1, RULE_pair = 2, RULE_value = 3, RULE_percent = 4, 
		RULE_thickness = 5, RULE_comput = 6, RULE_binding = 7, RULE_native = 8, 
		RULE_jsonpath = 9, RULE_dic = 10;
	public static readonly string[] ruleNames = {
		"root", "obj", "pair", "value", "percent", "thickness", "comput", "binding", 
		"native", "jsonpath", "dic"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'null'", "'%'", "'('", "')'", "'$bind'", 
		"'$res'", "'$json'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING", "BOOLEAN", "TOKEN", "NUMBER", "Hws", "Vws", "DocComment", 
		"BlockComment", "LineComment", "LineCommentExt"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shiba.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShibaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShibaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShibaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; obj();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext[] obj() {
			return GetRuleContexts<ObjContext>();
		}
		public ObjContext obj(int i) {
			return GetRuleContext<ObjContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterObj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitObj(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(TOKEN);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 25; Match(T__0);
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOKEN) {
					{
					State = 28;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 26; pair();
						}
						break;
					case 2:
						{
						State = 27; obj();
						}
						break;
					}
					State = 39;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__1 || _la==TOKEN) {
						{
						{
						State = 31;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__1) {
							{
							State = 30; Match(T__1);
							}
						}

						State = 35;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
						case 1:
							{
							State = 33; pair();
							}
							break;
						case 2:
							{
							State = 34; obj();
							}
							break;
						}
						}
						}
						State = 41;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 44; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(TOKEN);
			State = 48; Match(T__3);
			State = 49; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ShibaParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(ShibaParser.NUMBER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(ShibaParser.BOOLEAN, 0); }
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public PercentContext percent() {
			return GetRuleContext<PercentContext>(0);
		}
		public ThicknessContext thickness() {
			return GetRuleContext<ThicknessContext>(0);
		}
		public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		public NativeContext native() {
			return GetRuleContext<NativeContext>(0);
		}
		public DicContext dic() {
			return GetRuleContext<DicContext>(0);
		}
		public JsonpathContext jsonpath() {
			return GetRuleContext<JsonpathContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53; Match(BOOLEAN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54; Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55; Match(TOKEN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56; percent();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 57; thickness();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 58; binding();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 59; native();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 60; dic();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 61; jsonpath();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ShibaParser.NUMBER, 0); }
		public PercentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterPercent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitPercent(this);
		}
	}

	[RuleVersion(0)]
	public PercentContext percent() {
		PercentContext _localctx = new PercentContext(Context, State);
		EnterRule(_localctx, 8, RULE_percent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(NUMBER);
			State = 65; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThicknessContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(ShibaParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(ShibaParser.NUMBER, i);
		}
		public ThicknessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thickness; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterThickness(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitThickness(this);
		}
	}

	[RuleVersion(0)]
	public ThicknessContext thickness() {
		ThicknessContext _localctx = new ThicknessContext(Context, State);
		EnterRule(_localctx, 10, RULE_thickness);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(NUMBER);
				State = 69; Match(T__1);
				State = 70; Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; Match(NUMBER);
				State = 72; Match(T__1);
				State = 73; Match(NUMBER);
				State = 74; Match(T__1);
				State = 75; Match(NUMBER);
				State = 76; Match(T__1);
				State = 77; Match(NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputContext : ParserRuleContext {
		public ITerminalNode TOKEN() { return GetToken(ShibaParser.TOKEN, 0); }
		public ComputContext comput() {
			return GetRuleContext<ComputContext>(0);
		}
		public ComputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterComput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitComput(this);
		}
	}

	[RuleVersion(0)]
	public ComputContext comput() {
		ComputContext _localctx = new ComputContext(Context, State);
		EnterRule(_localctx, 12, RULE_comput);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(TOKEN);
				State = 81; Match(T__6);
				State = 82; comput();
				State = 83; Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; Match(TOKEN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		public ComputContext comput() {
			return GetRuleContext<ComputContext>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterBinding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitBinding(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 14, RULE_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(T__8);
			State = 89; comput();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeContext : ParserRuleContext {
		public ComputContext comput() {
			return GetRuleContext<ComputContext>(0);
		}
		public NativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterNative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitNative(this);
		}
	}

	[RuleVersion(0)]
	public NativeContext native() {
		NativeContext _localctx = new NativeContext(Context, State);
		EnterRule(_localctx, 16, RULE_native);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(T__9);
			State = 92; comput();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonpathContext : ParserRuleContext {
		public ComputContext comput() {
			return GetRuleContext<ComputContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterJsonpath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitJsonpath(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonpath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__10);
			State = 95; comput();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DicContext : ParserRuleContext {
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public DicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dic; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.EnterDic(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShibaListener typedListener = listener as IShibaListener;
			if (typedListener != null) typedListener.ExitDic(this);
		}
	}

	[RuleVersion(0)]
	public DicContext dic() {
		DicContext _localctx = new DicContext(Context, State);
		EnterRule(_localctx, 20, RULE_dic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(T__11);
			State = 98; pair();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==TOKEN) {
				{
				{
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 99; Match(T__1);
					}
				}

				State = 102; pair();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', 'q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1F', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '&', '\n', '\x3', '\a', '\x3', '(', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '+', '\v', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x30', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x41', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'Y', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'g', '\n', '\f', 
		'\x3', '\f', '\a', '\f', 'j', '\n', '\f', '\f', '\f', '\xE', '\f', 'm', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x2', '\x2', 'z', '\x2', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\b', '@', '\x3', '\x2', '\x2', '\x2', '\n', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'X', '\x3', '\x2', '\x2', '\x2', '\x10', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x12', ']', '\x3', '\x2', '\x2', '\x2', '\x14', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x63', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x5', 
		'\x4', '\x3', '\x2', '\x19', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'/', '\a', '\x12', '\x2', '\x2', '\x1B', ',', '\a', '\x3', '\x2', '\x2', 
		'\x1C', '\x1F', '\x5', '\x6', '\x4', '\x2', '\x1D', '\x1F', '\x5', '\x4', 
		'\x3', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ')', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\"', '\a', '\x4', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', 
		'\x2', '#', '&', '\x5', '\x6', '\x4', '\x2', '$', '&', '\x5', '\x4', '\x3', 
		'\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '!', '\x3', '\x2', 
		'\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', 
		'\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', 
		'.', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\a', '\x5', '\x2', '\x2', 
		'/', '\x1B', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x5', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x12', '\x2', '\x2', '\x32', '\x33', '\a', '\x6', '\x2', '\x2', '\x33', 
		'\x34', '\x5', '\b', '\x5', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x41', '\a', '\x10', '\x2', '\x2', '\x36', '\x41', '\a', 
		'\x13', '\x2', '\x2', '\x37', '\x41', '\a', '\x11', '\x2', '\x2', '\x38', 
		'\x41', '\a', '\a', '\x2', '\x2', '\x39', '\x41', '\a', '\x12', '\x2', 
		'\x2', ':', '\x41', '\x5', '\n', '\x6', '\x2', ';', '\x41', '\x5', '\f', 
		'\a', '\x2', '<', '\x41', '\x5', '\x10', '\t', '\x2', '=', '\x41', '\x5', 
		'\x12', '\n', '\x2', '>', '\x41', '\x5', '\x16', '\f', '\x2', '?', '\x41', 
		'\x5', '\x14', '\v', '\x2', '@', '\x35', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '@', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x38', '\x3', '\x2', '\x2', '\x2', '@', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '@', ':', '\x3', '\x2', '\x2', '\x2', '@', ';', '\x3', '\x2', 
		'\x2', '\x2', '@', '<', '\x3', '\x2', '\x2', '\x2', '@', '=', '\x3', '\x2', 
		'\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\t', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x13', '\x2', '\x2', '\x43', '\x44', '\a', '\b', '\x2', '\x2', 
		'\x44', '\v', '\x3', '\x2', '\x2', '\x2', '\x45', 'Q', '\a', '\x13', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x13', '\x2', '\x2', 'G', 'H', '\a', '\x4', 
		'\x2', '\x2', 'H', 'Q', '\a', '\x13', '\x2', '\x2', 'I', 'J', '\a', '\x13', 
		'\x2', '\x2', 'J', 'K', '\a', '\x4', '\x2', '\x2', 'K', 'L', '\a', '\x13', 
		'\x2', '\x2', 'L', 'M', '\a', '\x4', '\x2', '\x2', 'M', 'N', '\a', '\x13', 
		'\x2', '\x2', 'N', 'O', '\a', '\x4', '\x2', '\x2', 'O', 'Q', '\a', '\x13', 
		'\x2', '\x2', 'P', '\x45', '\x3', '\x2', '\x2', '\x2', 'P', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'I', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x12', '\x2', '\x2', 'S', 
		'T', '\a', '\t', '\x2', '\x2', 'T', 'U', '\x5', '\xE', '\b', '\x2', 'U', 
		'V', '\a', '\n', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 
		'Y', '\a', '\x12', '\x2', '\x2', 'X', 'R', '\x3', '\x2', '\x2', '\x2', 
		'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\v', '\x2', '\x2', '[', '\\', '\x5', '\xE', '\b', 
		'\x2', '\\', '\x11', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\f', 
		'\x2', '\x2', '^', '_', '\x5', '\xE', '\b', '\x2', '_', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\a', '\r', '\x2', '\x2', '\x61', '\x62', 
		'\x5', '\xE', '\b', '\x2', '\x62', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\xE', '\x2', '\x2', '\x64', 'k', '\x5', '\x6', 
		'\x4', '\x2', '\x65', 'g', '\a', '\x4', '\x2', '\x2', '\x66', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x5', '\x6', '\x4', '\x2', 
		'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '\xF', '\x2', '\x2', 'o', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x1E', '!', '%', ')', ',', '/', '@', 'P', 'X', '\x66', 
		'k',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Shiba.Parser
